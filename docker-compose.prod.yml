# Production Docker Compose configuration for User Registration Application
# This file provides production-ready settings with enhanced security and monitoring

version: '3.8'

services:
  # Spring Boot Application Service
  app:
    build: .
    container_name: user-registration-app-prod
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
    environment:
      # Production environment variables
      SPRING_PROFILES_ACTIVE: production
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/userdb
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: validate
      SPRING_JPA_SHOW_SQL: false
      SERVER_PORT: 8080
      
      # Production logging
      LOGGING_LEVEL_COM_CODEHACKS_USER_REGISTRATION: INFO
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK: WARN
      LOGGING_LEVEL_ORG_HIBERNATE_SQL: WARN
      
      # JVM production settings
      JAVA_OPTS: "-Xms1g -Xmx2g -XX:+UseG1GC -XX:+UseContainerSupport -XX:MaxGCPauseMillis=200"
    
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Production security settings
    read_only: true
    tmpfs:
      - /tmp
      - /var/tmp
    
    networks:
      - user-registration-network

  # PostgreSQL Database Service
  db:
    image: postgres:16.8-alpine
    container_name: user-registration-db-prod
    ports:
      - "127.0.0.1:5432:5432"  # Only accessible from localhost
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./backup:/backup  # For database backups
    
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    
    # Production security settings
    read_only: false
    networks:
      - user-registration-network

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: user-registration-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - user-registration-network

  # Prometheus for Metrics (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: user-registration-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - user-registration-network

  # Grafana for Visualization (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: user-registration-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - user-registration-network

volumes:
  postgres_data_prod:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  user-registration-network:
    driver: bridge 