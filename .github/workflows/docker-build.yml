name: Build and Deploy

on:
  push:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# Add permissions for GitHub Container Registry
permissions:
  contents: read
  packages: write

jobs:
  test-and-build:
    name: Test and Build Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Run tests
        run: mvn test -Dspring.profiles.active=test

      - name: Build application
        run: mvn clean package -DskipTests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=sha,prefix=,suffix=,format=short

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          # Create a simple tag for testing with lowercase repository name
          TEST_TAG="${{ env.REGISTRY }}/${{ github.repository | lower }}:test-${{ github.sha }}"
          
          # Build a local test image
          docker build -t "$TEST_TAG" .
          
          # Start PostgreSQL for testing
          docker run -d \
            --name test-postgres \
            -e POSTGRES_DB=testdb \
            -e POSTGRES_USER=testuser \
            -e POSTGRES_PASSWORD=testpass \
            -p 5432:5432 \
            postgres:16.8-alpine
          
          # Wait for PostgreSQL to be ready
          sleep 10
          
          # Run the application container
          docker run -d \
            --name test-app \
            --link test-postgres:postgres \
            -p 8080:8080 \
            -e SPRING_DATASOURCE_URL=jdbc:postgresql://test-postgres:5432/testdb \
            -e SPRING_DATASOURCE_USERNAME=testuser \
            -e SPRING_DATASOURCE_PASSWORD=testpass \
            -e SPRING_JPA_HIBERNATE_DDL_AUTO=create-drop \
            "$TEST_TAG"
          
          # Wait for application to start
          sleep 30
          
          # Test health endpoint
          curl -f http://localhost:8080/actuator/health || exit 1
          
          # Test root endpoint
          curl -f http://localhost:8080/ || exit 1
          
          # Cleanup
          docker stop test-app test-postgres || true
          docker rm test-app test-postgres || true 